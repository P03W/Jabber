//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mc/jabber/proto/protos/circuitManagerBuffer.proto

package mc.jabber.proto

@kotlin.jvm.JvmSynthetic
inline fun circuitManagerProto(block: mc.jabber.proto.CircuitManagerProtoKt.Dsl.() -> Unit): mc.jabber.proto.CircuitManagerBuffer.CircuitManagerProto =
    mc.jabber.proto.CircuitManagerProtoKt.Dsl._create(mc.jabber.proto.CircuitManagerBuffer.CircuitManagerProto.newBuilder())
        .apply { block() }._build()

object CircuitManagerProtoKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
        @kotlin.jvm.JvmField private val _builder: mc.jabber.proto.CircuitManagerBuffer.CircuitManagerProto.Builder
    ) {
        companion object {
            @kotlin.jvm.JvmSynthetic
            @kotlin.PublishedApi
            internal fun _create(builder: mc.jabber.proto.CircuitManagerBuffer.CircuitManagerProto.Builder): Dsl =
                Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): mc.jabber.proto.CircuitManagerBuffer.CircuitManagerProto = _builder.build()

        /**
         * <code>.mc.jabber.proto.CircuitBoardProto board = 1;</code>
         */
        var board: mc.jabber.proto.CircuitBoardBuffer.CircuitBoardProto
            @JvmName("getBoard")
            get() = _builder.board
            @JvmName("setBoard")
            set(value) {
                _builder.board = value
            }

        /**
         * <code>.mc.jabber.proto.CircuitBoardProto board = 1;</code>
         */
        fun clearBoard() {
            _builder.clearBoard()
        }

        /**
         * <code>.mc.jabber.proto.CircuitBoardProto board = 1;</code>
         * @return Whether the board field is set.
         */
        fun hasBoard(): kotlin.Boolean {
            return _builder.hasBoard()
        }

        /**
         * An uninstantiable, behaviorless type to represent the field in
         * generics.
         */
        @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
        class ChipDataProxy private constructor() : com.google.protobuf.kotlin.DslProxy()

        /**
         * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
         */
        val chipData: com.google.protobuf.kotlin.DslMap<kotlin.Int, com.google.protobuf.ByteString, ChipDataProxy>
            @kotlin.jvm.JvmSynthetic
            @JvmName("getChipDataMap")
            get() = com.google.protobuf.kotlin.DslMap(
                _builder.chipDataMap
            )

        /**
         * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
         */
        @JvmName("putChipData")
        fun com.google.protobuf.kotlin.DslMap<kotlin.Int, com.google.protobuf.ByteString, ChipDataProxy>.put(
            key: kotlin.Int,
            value: com.google.protobuf.ByteString
        ) {
            _builder.putChipData(key, value)
        }

        /**
         * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
         */
        @kotlin.jvm.JvmSynthetic
        @JvmName("setChipData")
        inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.Int, com.google.protobuf.ByteString, ChipDataProxy>.set(
            key: kotlin.Int,
            value: com.google.protobuf.ByteString
        ) {
            put(key, value)
        }

        /**
         * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
         */
        @kotlin.jvm.JvmSynthetic
        @JvmName("removeChipData")
        fun com.google.protobuf.kotlin.DslMap<kotlin.Int, com.google.protobuf.ByteString, ChipDataProxy>.remove(key: kotlin.Int) {
            _builder.removeChipData(key)
        }

        /**
         * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
         */
        @kotlin.jvm.JvmSynthetic
        @JvmName("putAllChipData")
        fun com.google.protobuf.kotlin.DslMap<kotlin.Int, com.google.protobuf.ByteString, ChipDataProxy>.putAll(map: kotlin.collections.Map<kotlin.Int, com.google.protobuf.ByteString>) {
            _builder.putAllChipData(map)
        }

        /**
         * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
         */
        @kotlin.jvm.JvmSynthetic
        @JvmName("clearChipData")
        fun com.google.protobuf.kotlin.DslMap<kotlin.Int, com.google.protobuf.ByteString, ChipDataProxy>.clear() {
            _builder.clearChipData()
        }

        /**
         * An uninstantiable, behaviorless type to represent the field in
         * generics.
         */
        @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
        class StateProxy private constructor() : com.google.protobuf.kotlin.DslProxy()

        /**
         * <code>map&lt;int32, .mc.jabber.proto.CardinalDataProto&gt; state = 3;</code>
         */
        val state: com.google.protobuf.kotlin.DslMap<kotlin.Int, mc.jabber.proto.CardinalDataBuffer.CardinalDataProto, StateProxy>
            @kotlin.jvm.JvmSynthetic
            @JvmName("getStateMap")
            get() = com.google.protobuf.kotlin.DslMap(
                _builder.stateMap
            )

        /**
         * <code>map&lt;int32, .mc.jabber.proto.CardinalDataProto&gt; state = 3;</code>
         */
        @JvmName("putState")
        fun com.google.protobuf.kotlin.DslMap<kotlin.Int, mc.jabber.proto.CardinalDataBuffer.CardinalDataProto, StateProxy>.put(
            key: kotlin.Int,
            value: mc.jabber.proto.CardinalDataBuffer.CardinalDataProto
        ) {
            _builder.putState(key, value)
        }

        /**
         * <code>map&lt;int32, .mc.jabber.proto.CardinalDataProto&gt; state = 3;</code>
         */
        @kotlin.jvm.JvmSynthetic
        @JvmName("setState")
        inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.Int, mc.jabber.proto.CardinalDataBuffer.CardinalDataProto, StateProxy>.set(
            key: kotlin.Int,
            value: mc.jabber.proto.CardinalDataBuffer.CardinalDataProto
        ) {
            put(key, value)
        }

        /**
         * <code>map&lt;int32, .mc.jabber.proto.CardinalDataProto&gt; state = 3;</code>
         */
        @kotlin.jvm.JvmSynthetic
        @JvmName("removeState")
        fun com.google.protobuf.kotlin.DslMap<kotlin.Int, mc.jabber.proto.CardinalDataBuffer.CardinalDataProto, StateProxy>.remove(
            key: kotlin.Int
        ) {
            _builder.removeState(key)
        }

        /**
         * <code>map&lt;int32, .mc.jabber.proto.CardinalDataProto&gt; state = 3;</code>
         */
        @kotlin.jvm.JvmSynthetic
        @JvmName("putAllState")
        fun com.google.protobuf.kotlin.DslMap<kotlin.Int, mc.jabber.proto.CardinalDataBuffer.CardinalDataProto, StateProxy>.putAll(
            map: kotlin.collections.Map<kotlin.Int, mc.jabber.proto.CardinalDataBuffer.CardinalDataProto>
        ) {
            _builder.putAllState(map)
        }

        /**
         * <code>map&lt;int32, .mc.jabber.proto.CardinalDataProto&gt; state = 3;</code>
         */
        @kotlin.jvm.JvmSynthetic
        @JvmName("clearState")
        fun com.google.protobuf.kotlin.DslMap<kotlin.Int, mc.jabber.proto.CardinalDataBuffer.CardinalDataProto, StateProxy>.clear() {
            _builder.clearState()
        }
    }
}

@kotlin.jvm.JvmSynthetic
inline fun mc.jabber.proto.CircuitManagerBuffer.CircuitManagerProto.copy(block: mc.jabber.proto.CircuitManagerProtoKt.Dsl.() -> Unit): mc.jabber.proto.CircuitManagerBuffer.CircuitManagerProto =
    mc.jabber.proto.CircuitManagerProtoKt.Dsl._create(this.toBuilder()).apply { block() }._build()
