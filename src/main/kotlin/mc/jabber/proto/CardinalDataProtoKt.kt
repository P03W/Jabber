//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: kotlin/mc/jabber/proto/protos/cardinalDataBuffer.proto

package mc.jabber.proto;

@kotlin.jvm.JvmSynthetic
inline fun cardinalDataProto(block: mc.jabber.proto.CardinalDataProtoKt.Dsl.() -> Unit): mc.jabber.proto.CardinalDataBuffer.CardinalDataProto =
  mc.jabber.proto.CardinalDataProtoKt.Dsl._create(mc.jabber.proto.CardinalDataBuffer.CardinalDataProto.newBuilder()).apply { block() }._build()
object CardinalDataProtoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: mc.jabber.proto.CardinalDataBuffer.CardinalDataProto.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: mc.jabber.proto.CardinalDataBuffer.CardinalDataProto.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): mc.jabber.proto.CardinalDataBuffer.CardinalDataProto = _builder.build()

    /**
     * <code>optional int64 up = 1;</code>
     */
    var up: kotlin.Long
      @JvmName("getUp")
      get() = _builder.getUp()
      @JvmName("setUp")
      set(value) {
        _builder.setUp(value)
      }
    /**
     * <code>optional int64 up = 1;</code>
     */
    fun clearUp() {
      _builder.clearUp()
    }
    /**
     * <code>optional int64 up = 1;</code>
     * @return Whether the up field is set.
     */
    fun hasUp(): kotlin.Boolean {
      return _builder.hasUp()
    }

    /**
     * <code>optional int64 down = 2;</code>
     */
    var down: kotlin.Long
      @JvmName("getDown")
      get() = _builder.getDown()
      @JvmName("setDown")
      set(value) {
        _builder.setDown(value)
      }
    /**
     * <code>optional int64 down = 2;</code>
     */
    fun clearDown() {
      _builder.clearDown()
    }
    /**
     * <code>optional int64 down = 2;</code>
     * @return Whether the down field is set.
     */
    fun hasDown(): kotlin.Boolean {
      return _builder.hasDown()
    }

    /**
     * <code>optional int64 right = 3;</code>
     */
    var right: kotlin.Long
      @JvmName("getRight")
      get() = _builder.getRight()
      @JvmName("setRight")
      set(value) {
        _builder.setRight(value)
      }
    /**
     * <code>optional int64 right = 3;</code>
     */
    fun clearRight() {
      _builder.clearRight()
    }
    /**
     * <code>optional int64 right = 3;</code>
     * @return Whether the right field is set.
     */
    fun hasRight(): kotlin.Boolean {
      return _builder.hasRight()
    }

    /**
     * <code>optional int64 left = 4;</code>
     */
    var left: kotlin.Long
      @JvmName("getLeft")
      get() = _builder.getLeft()
      @JvmName("setLeft")
      set(value) {
        _builder.setLeft(value)
      }
    /**
     * <code>optional int64 left = 4;</code>
     */
    fun clearLeft() {
      _builder.clearLeft()
    }
    /**
     * <code>optional int64 left = 4;</code>
     * @return Whether the left field is set.
     */
    fun hasLeft(): kotlin.Boolean {
      return _builder.hasLeft()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun mc.jabber.proto.CardinalDataBuffer.CardinalDataProto.copy(block: mc.jabber.proto.CardinalDataProtoKt.Dsl.() -> Unit): mc.jabber.proto.CardinalDataBuffer.CardinalDataProto =
  mc.jabber.proto.CardinalDataProtoKt.Dsl._create(this.toBuilder()).apply { block() }._build()
