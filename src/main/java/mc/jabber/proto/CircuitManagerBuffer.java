// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mc/jabber/proto/circuitManagerBuffer.proto

package mc.jabber.proto;

public final class CircuitManagerBuffer {
  private CircuitManagerBuffer() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface CircuitManagerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:mc.jabber.proto.CircuitManager)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.mc.jabber.proto.CircuitBoard board = 1;</code>
     * @return Whether the board field is set.
     */
    boolean hasBoard();
    /**
     * <code>.mc.jabber.proto.CircuitBoard board = 1;</code>
     * @return The board.
     */
    mc.jabber.proto.CircuitBoardBuffer.CircuitBoard getBoard();
    /**
     * <code>.mc.jabber.proto.CircuitBoard board = 1;</code>
     */
    mc.jabber.proto.CircuitBoardBuffer.CircuitBoardOrBuilder getBoardOrBuilder();

    /**
     * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
     */
    int getChipDataCount();
    /**
     * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
     */
    boolean containsChipData(
        int key);
    /**
     * Use {@link #getChipDataMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getChipData();
    /**
     * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
     */
    java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
    getChipDataMap();
    /**
     * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
     */

    com.google.protobuf.ByteString getChipDataOrDefault(
        int key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
     */

    com.google.protobuf.ByteString getChipDataOrThrow(
        int key);

    /**
     * <code>map&lt;int32, .mc.jabber.proto.CardinalData&gt; state = 3;</code>
     */
    int getStateCount();
    /**
     * <code>map&lt;int32, .mc.jabber.proto.CardinalData&gt; state = 3;</code>
     */
    boolean containsState(
        int key);
    /**
     * Use {@link #getStateMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData>
    getState();
    /**
     * <code>map&lt;int32, .mc.jabber.proto.CardinalData&gt; state = 3;</code>
     */
    java.util.Map<java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData>
    getStateMap();
    /**
     * <code>map&lt;int32, .mc.jabber.proto.CardinalData&gt; state = 3;</code>
     */

    mc.jabber.proto.CardinalDataBuffer.CardinalData getStateOrDefault(
        int key,
        mc.jabber.proto.CardinalDataBuffer.CardinalData defaultValue);
    /**
     * <code>map&lt;int32, .mc.jabber.proto.CardinalData&gt; state = 3;</code>
     */

    mc.jabber.proto.CardinalDataBuffer.CardinalData getStateOrThrow(
        int key);
  }
  /**
   * Protobuf type {@code mc.jabber.proto.CircuitManager}
   */
  public static final class CircuitManager extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:mc.jabber.proto.CircuitManager)
      CircuitManagerOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CircuitManager.newBuilder() to construct.
    private CircuitManager(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CircuitManager() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CircuitManager();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CircuitManager(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              mc.jabber.proto.CircuitBoardBuffer.CircuitBoard.Builder subBuilder = null;
              if (board_ != null) {
                subBuilder = board_.toBuilder();
              }
              board_ = input.readMessage(mc.jabber.proto.CircuitBoardBuffer.CircuitBoard.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(board_);
                board_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                chipData_ = com.google.protobuf.MapField.newMapField(
                    ChipDataDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.Integer, com.google.protobuf.ByteString>
              chipData__ = input.readMessage(
                  ChipDataDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              chipData_.getMutableMap().put(
                  chipData__.getKey(), chipData__.getValue());
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                state_ = com.google.protobuf.MapField.newMapField(
                    StateDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000002;
              }
              com.google.protobuf.MapEntry<java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData>
              state__ = input.readMessage(
                  StateDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              state_.getMutableMap().put(
                  state__.getKey(), state__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return mc.jabber.proto.CircuitManagerBuffer.internal_static_mc_jabber_proto_CircuitManager_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetChipData();
        case 3:
          return internalGetState();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return mc.jabber.proto.CircuitManagerBuffer.internal_static_mc_jabber_proto_CircuitManager_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              mc.jabber.proto.CircuitManagerBuffer.CircuitManager.class, mc.jabber.proto.CircuitManagerBuffer.CircuitManager.Builder.class);
    }

    public static final int BOARD_FIELD_NUMBER = 1;
    private mc.jabber.proto.CircuitBoardBuffer.CircuitBoard board_;
    /**
     * <code>.mc.jabber.proto.CircuitBoard board = 1;</code>
     * @return Whether the board field is set.
     */
    @java.lang.Override
    public boolean hasBoard() {
      return board_ != null;
    }
    /**
     * <code>.mc.jabber.proto.CircuitBoard board = 1;</code>
     * @return The board.
     */
    @java.lang.Override
    public mc.jabber.proto.CircuitBoardBuffer.CircuitBoard getBoard() {
      return board_ == null ? mc.jabber.proto.CircuitBoardBuffer.CircuitBoard.getDefaultInstance() : board_;
    }
    /**
     * <code>.mc.jabber.proto.CircuitBoard board = 1;</code>
     */
    @java.lang.Override
    public mc.jabber.proto.CircuitBoardBuffer.CircuitBoardOrBuilder getBoardOrBuilder() {
      return getBoard();
    }

    public static final int CHIPDATA_FIELD_NUMBER = 2;
    private static final class ChipDataDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.Integer, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.Integer, com.google.protobuf.ByteString>newDefaultInstance(
                  mc.jabber.proto.CircuitManagerBuffer.internal_static_mc_jabber_proto_CircuitManager_ChipDataEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapField<
        java.lang.Integer, com.google.protobuf.ByteString> chipData_;
    private com.google.protobuf.MapField<java.lang.Integer, com.google.protobuf.ByteString>
    internalGetChipData() {
      if (chipData_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ChipDataDefaultEntryHolder.defaultEntry);
      }
      return chipData_;
    }

    public int getChipDataCount() {
      return internalGetChipData().getMap().size();
    }
    /**
     * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
     */

    @java.lang.Override
    public boolean containsChipData(
        int key) {
      
      return internalGetChipData().getMap().containsKey(key);
    }
    /**
     * Use {@link #getChipDataMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getChipData() {
      return getChipDataMap();
    }
    /**
     * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getChipDataMap() {
      return internalGetChipData().getMap();
    }
    /**
     * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getChipDataOrDefault(
        int key,
        com.google.protobuf.ByteString defaultValue) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
          internalGetChipData().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getChipDataOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
          internalGetChipData().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int STATE_FIELD_NUMBER = 3;
    private static final class StateDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData>newDefaultInstance(
                  mc.jabber.proto.CircuitManagerBuffer.internal_static_mc_jabber_proto_CircuitManager_StateEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  mc.jabber.proto.CardinalDataBuffer.CardinalData.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData> state_;
    private com.google.protobuf.MapField<java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData>
    internalGetState() {
      if (state_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            StateDefaultEntryHolder.defaultEntry);
      }
      return state_;
    }

    public int getStateCount() {
      return internalGetState().getMap().size();
    }
    /**
     * <code>map&lt;int32, .mc.jabber.proto.CardinalData&gt; state = 3;</code>
     */

    @java.lang.Override
    public boolean containsState(
        int key) {
      
      return internalGetState().getMap().containsKey(key);
    }
    /**
     * Use {@link #getStateMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData> getState() {
      return getStateMap();
    }
    /**
     * <code>map&lt;int32, .mc.jabber.proto.CardinalData&gt; state = 3;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData> getStateMap() {
      return internalGetState().getMap();
    }
    /**
     * <code>map&lt;int32, .mc.jabber.proto.CardinalData&gt; state = 3;</code>
     */
    @java.lang.Override

    public mc.jabber.proto.CardinalDataBuffer.CardinalData getStateOrDefault(
        int key,
        mc.jabber.proto.CardinalDataBuffer.CardinalData defaultValue) {
      
      java.util.Map<java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData> map =
          internalGetState().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, .mc.jabber.proto.CardinalData&gt; state = 3;</code>
     */
    @java.lang.Override

    public mc.jabber.proto.CardinalDataBuffer.CardinalData getStateOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData> map =
          internalGetState().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (board_ != null) {
        output.writeMessage(1, getBoard());
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeIntegerMapTo(
          output,
          internalGetChipData(),
          ChipDataDefaultEntryHolder.defaultEntry,
          2);
      com.google.protobuf.GeneratedMessageV3
        .serializeIntegerMapTo(
          output,
          internalGetState(),
          StateDefaultEntryHolder.defaultEntry,
          3);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (board_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBoard());
      }
      for (java.util.Map.Entry<java.lang.Integer, com.google.protobuf.ByteString> entry
           : internalGetChipData().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.Integer, com.google.protobuf.ByteString>
        chipData__ = ChipDataDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, chipData__);
      }
      for (java.util.Map.Entry<java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData> entry
           : internalGetState().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData>
        state__ = StateDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, state__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof mc.jabber.proto.CircuitManagerBuffer.CircuitManager)) {
        return super.equals(obj);
      }
      mc.jabber.proto.CircuitManagerBuffer.CircuitManager other = (mc.jabber.proto.CircuitManagerBuffer.CircuitManager) obj;

      if (hasBoard() != other.hasBoard()) return false;
      if (hasBoard()) {
        if (!getBoard()
            .equals(other.getBoard())) return false;
      }
      if (!internalGetChipData().equals(
          other.internalGetChipData())) return false;
      if (!internalGetState().equals(
          other.internalGetState())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBoard()) {
        hash = (37 * hash) + BOARD_FIELD_NUMBER;
        hash = (53 * hash) + getBoard().hashCode();
      }
      if (!internalGetChipData().getMap().isEmpty()) {
        hash = (37 * hash) + CHIPDATA_FIELD_NUMBER;
        hash = (53 * hash) + internalGetChipData().hashCode();
      }
      if (!internalGetState().getMap().isEmpty()) {
        hash = (37 * hash) + STATE_FIELD_NUMBER;
        hash = (53 * hash) + internalGetState().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static mc.jabber.proto.CircuitManagerBuffer.CircuitManager parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mc.jabber.proto.CircuitManagerBuffer.CircuitManager parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mc.jabber.proto.CircuitManagerBuffer.CircuitManager parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mc.jabber.proto.CircuitManagerBuffer.CircuitManager parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mc.jabber.proto.CircuitManagerBuffer.CircuitManager parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mc.jabber.proto.CircuitManagerBuffer.CircuitManager parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mc.jabber.proto.CircuitManagerBuffer.CircuitManager parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mc.jabber.proto.CircuitManagerBuffer.CircuitManager parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static mc.jabber.proto.CircuitManagerBuffer.CircuitManager parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static mc.jabber.proto.CircuitManagerBuffer.CircuitManager parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static mc.jabber.proto.CircuitManagerBuffer.CircuitManager parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mc.jabber.proto.CircuitManagerBuffer.CircuitManager parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(mc.jabber.proto.CircuitManagerBuffer.CircuitManager prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mc.jabber.proto.CircuitManager}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:mc.jabber.proto.CircuitManager)
        mc.jabber.proto.CircuitManagerBuffer.CircuitManagerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return mc.jabber.proto.CircuitManagerBuffer.internal_static_mc_jabber_proto_CircuitManager_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetChipData();
          case 3:
            return internalGetState();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetMutableChipData();
          case 3:
            return internalGetMutableState();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return mc.jabber.proto.CircuitManagerBuffer.internal_static_mc_jabber_proto_CircuitManager_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                mc.jabber.proto.CircuitManagerBuffer.CircuitManager.class, mc.jabber.proto.CircuitManagerBuffer.CircuitManager.Builder.class);
      }

      // Construct using mc.jabber.proto.CircuitManagerBuffer.CircuitManager.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (boardBuilder_ == null) {
          board_ = null;
        } else {
          board_ = null;
          boardBuilder_ = null;
        }
        internalGetMutableChipData().clear();
        internalGetMutableState().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return mc.jabber.proto.CircuitManagerBuffer.internal_static_mc_jabber_proto_CircuitManager_descriptor;
      }

      @java.lang.Override
      public mc.jabber.proto.CircuitManagerBuffer.CircuitManager getDefaultInstanceForType() {
        return mc.jabber.proto.CircuitManagerBuffer.CircuitManager.getDefaultInstance();
      }

      @java.lang.Override
      public mc.jabber.proto.CircuitManagerBuffer.CircuitManager build() {
        mc.jabber.proto.CircuitManagerBuffer.CircuitManager result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public mc.jabber.proto.CircuitManagerBuffer.CircuitManager buildPartial() {
        mc.jabber.proto.CircuitManagerBuffer.CircuitManager result = new mc.jabber.proto.CircuitManagerBuffer.CircuitManager(this);
        int from_bitField0_ = bitField0_;
        if (boardBuilder_ == null) {
          result.board_ = board_;
        } else {
          result.board_ = boardBuilder_.build();
        }
        result.chipData_ = internalGetChipData();
        result.chipData_.makeImmutable();
        result.state_ = internalGetState();
        result.state_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof mc.jabber.proto.CircuitManagerBuffer.CircuitManager) {
          return mergeFrom((mc.jabber.proto.CircuitManagerBuffer.CircuitManager)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(mc.jabber.proto.CircuitManagerBuffer.CircuitManager other) {
        if (other == mc.jabber.proto.CircuitManagerBuffer.CircuitManager.getDefaultInstance()) return this;
        if (other.hasBoard()) {
          mergeBoard(other.getBoard());
        }
        internalGetMutableChipData().mergeFrom(
            other.internalGetChipData());
        internalGetMutableState().mergeFrom(
            other.internalGetState());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        mc.jabber.proto.CircuitManagerBuffer.CircuitManager parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mc.jabber.proto.CircuitManagerBuffer.CircuitManager) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private mc.jabber.proto.CircuitBoardBuffer.CircuitBoard board_;
      private com.google.protobuf.SingleFieldBuilderV3<
          mc.jabber.proto.CircuitBoardBuffer.CircuitBoard, mc.jabber.proto.CircuitBoardBuffer.CircuitBoard.Builder, mc.jabber.proto.CircuitBoardBuffer.CircuitBoardOrBuilder> boardBuilder_;
      /**
       * <code>.mc.jabber.proto.CircuitBoard board = 1;</code>
       * @return Whether the board field is set.
       */
      public boolean hasBoard() {
        return boardBuilder_ != null || board_ != null;
      }
      /**
       * <code>.mc.jabber.proto.CircuitBoard board = 1;</code>
       * @return The board.
       */
      public mc.jabber.proto.CircuitBoardBuffer.CircuitBoard getBoard() {
        if (boardBuilder_ == null) {
          return board_ == null ? mc.jabber.proto.CircuitBoardBuffer.CircuitBoard.getDefaultInstance() : board_;
        } else {
          return boardBuilder_.getMessage();
        }
      }
      /**
       * <code>.mc.jabber.proto.CircuitBoard board = 1;</code>
       */
      public Builder setBoard(mc.jabber.proto.CircuitBoardBuffer.CircuitBoard value) {
        if (boardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          board_ = value;
          onChanged();
        } else {
          boardBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.mc.jabber.proto.CircuitBoard board = 1;</code>
       */
      public Builder setBoard(
          mc.jabber.proto.CircuitBoardBuffer.CircuitBoard.Builder builderForValue) {
        if (boardBuilder_ == null) {
          board_ = builderForValue.build();
          onChanged();
        } else {
          boardBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.mc.jabber.proto.CircuitBoard board = 1;</code>
       */
      public Builder mergeBoard(mc.jabber.proto.CircuitBoardBuffer.CircuitBoard value) {
        if (boardBuilder_ == null) {
          if (board_ != null) {
            board_ =
              mc.jabber.proto.CircuitBoardBuffer.CircuitBoard.newBuilder(board_).mergeFrom(value).buildPartial();
          } else {
            board_ = value;
          }
          onChanged();
        } else {
          boardBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.mc.jabber.proto.CircuitBoard board = 1;</code>
       */
      public Builder clearBoard() {
        if (boardBuilder_ == null) {
          board_ = null;
          onChanged();
        } else {
          board_ = null;
          boardBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.mc.jabber.proto.CircuitBoard board = 1;</code>
       */
      public mc.jabber.proto.CircuitBoardBuffer.CircuitBoard.Builder getBoardBuilder() {
        
        onChanged();
        return getBoardFieldBuilder().getBuilder();
      }
      /**
       * <code>.mc.jabber.proto.CircuitBoard board = 1;</code>
       */
      public mc.jabber.proto.CircuitBoardBuffer.CircuitBoardOrBuilder getBoardOrBuilder() {
        if (boardBuilder_ != null) {
          return boardBuilder_.getMessageOrBuilder();
        } else {
          return board_ == null ?
              mc.jabber.proto.CircuitBoardBuffer.CircuitBoard.getDefaultInstance() : board_;
        }
      }
      /**
       * <code>.mc.jabber.proto.CircuitBoard board = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          mc.jabber.proto.CircuitBoardBuffer.CircuitBoard, mc.jabber.proto.CircuitBoardBuffer.CircuitBoard.Builder, mc.jabber.proto.CircuitBoardBuffer.CircuitBoardOrBuilder> 
          getBoardFieldBuilder() {
        if (boardBuilder_ == null) {
          boardBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              mc.jabber.proto.CircuitBoardBuffer.CircuitBoard, mc.jabber.proto.CircuitBoardBuffer.CircuitBoard.Builder, mc.jabber.proto.CircuitBoardBuffer.CircuitBoardOrBuilder>(
                  getBoard(),
                  getParentForChildren(),
                  isClean());
          board_ = null;
        }
        return boardBuilder_;
      }

      private com.google.protobuf.MapField<
          java.lang.Integer, com.google.protobuf.ByteString> chipData_;
      private com.google.protobuf.MapField<java.lang.Integer, com.google.protobuf.ByteString>
      internalGetChipData() {
        if (chipData_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              ChipDataDefaultEntryHolder.defaultEntry);
        }
        return chipData_;
      }
      private com.google.protobuf.MapField<java.lang.Integer, com.google.protobuf.ByteString>
      internalGetMutableChipData() {
        onChanged();;
        if (chipData_ == null) {
          chipData_ = com.google.protobuf.MapField.newMapField(
              ChipDataDefaultEntryHolder.defaultEntry);
        }
        if (!chipData_.isMutable()) {
          chipData_ = chipData_.copy();
        }
        return chipData_;
      }

      public int getChipDataCount() {
        return internalGetChipData().getMap().size();
      }
      /**
       * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
       */

      @java.lang.Override
      public boolean containsChipData(
          int key) {
        
        return internalGetChipData().getMap().containsKey(key);
      }
      /**
       * Use {@link #getChipDataMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getChipData() {
        return getChipDataMap();
      }
      /**
       * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> getChipDataMap() {
        return internalGetChipData().getMap();
      }
      /**
       * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getChipDataOrDefault(
          int key,
          com.google.protobuf.ByteString defaultValue) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
            internalGetChipData().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getChipDataOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> map =
            internalGetChipData().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearChipData() {
        internalGetMutableChipData().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
       */

      public Builder removeChipData(
          int key) {
        
        internalGetMutableChipData().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, com.google.protobuf.ByteString>
      getMutableChipData() {
        return internalGetMutableChipData().getMutableMap();
      }
      /**
       * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
       */
      public Builder putChipData(
          int key,
          com.google.protobuf.ByteString value) {
        
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableChipData().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, bytes&gt; chipData = 2;</code>
       */

      public Builder putAllChipData(
          java.util.Map<java.lang.Integer, com.google.protobuf.ByteString> values) {
        internalGetMutableChipData().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData> state_;
      private com.google.protobuf.MapField<java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData>
      internalGetState() {
        if (state_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              StateDefaultEntryHolder.defaultEntry);
        }
        return state_;
      }
      private com.google.protobuf.MapField<java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData>
      internalGetMutableState() {
        onChanged();;
        if (state_ == null) {
          state_ = com.google.protobuf.MapField.newMapField(
              StateDefaultEntryHolder.defaultEntry);
        }
        if (!state_.isMutable()) {
          state_ = state_.copy();
        }
        return state_;
      }

      public int getStateCount() {
        return internalGetState().getMap().size();
      }
      /**
       * <code>map&lt;int32, .mc.jabber.proto.CardinalData&gt; state = 3;</code>
       */

      @java.lang.Override
      public boolean containsState(
          int key) {
        
        return internalGetState().getMap().containsKey(key);
      }
      /**
       * Use {@link #getStateMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData> getState() {
        return getStateMap();
      }
      /**
       * <code>map&lt;int32, .mc.jabber.proto.CardinalData&gt; state = 3;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData> getStateMap() {
        return internalGetState().getMap();
      }
      /**
       * <code>map&lt;int32, .mc.jabber.proto.CardinalData&gt; state = 3;</code>
       */
      @java.lang.Override

      public mc.jabber.proto.CardinalDataBuffer.CardinalData getStateOrDefault(
          int key,
          mc.jabber.proto.CardinalDataBuffer.CardinalData defaultValue) {
        
        java.util.Map<java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData> map =
            internalGetState().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, .mc.jabber.proto.CardinalData&gt; state = 3;</code>
       */
      @java.lang.Override

      public mc.jabber.proto.CardinalDataBuffer.CardinalData getStateOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData> map =
            internalGetState().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearState() {
        internalGetMutableState().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;int32, .mc.jabber.proto.CardinalData&gt; state = 3;</code>
       */

      public Builder removeState(
          int key) {
        
        internalGetMutableState().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData>
      getMutableState() {
        return internalGetMutableState().getMutableMap();
      }
      /**
       * <code>map&lt;int32, .mc.jabber.proto.CardinalData&gt; state = 3;</code>
       */
      public Builder putState(
          int key,
          mc.jabber.proto.CardinalDataBuffer.CardinalData value) {
        
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableState().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;int32, .mc.jabber.proto.CardinalData&gt; state = 3;</code>
       */

      public Builder putAllState(
          java.util.Map<java.lang.Integer, mc.jabber.proto.CardinalDataBuffer.CardinalData> values) {
        internalGetMutableState().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:mc.jabber.proto.CircuitManager)
    }

    // @@protoc_insertion_point(class_scope:mc.jabber.proto.CircuitManager)
    private static final mc.jabber.proto.CircuitManagerBuffer.CircuitManager DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new mc.jabber.proto.CircuitManagerBuffer.CircuitManager();
    }

    public static mc.jabber.proto.CircuitManagerBuffer.CircuitManager getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CircuitManager>
        PARSER = new com.google.protobuf.AbstractParser<CircuitManager>() {
      @java.lang.Override
      public CircuitManager parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CircuitManager(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CircuitManager> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CircuitManager> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public mc.jabber.proto.CircuitManagerBuffer.CircuitManager getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_mc_jabber_proto_CircuitManager_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_mc_jabber_proto_CircuitManager_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_mc_jabber_proto_CircuitManager_ChipDataEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_mc_jabber_proto_CircuitManager_ChipDataEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_mc_jabber_proto_CircuitManager_StateEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_mc_jabber_proto_CircuitManager_StateEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n*mc/jabber/proto/circuitManagerBuffer.p" +
      "roto\022\017mc.jabber.proto\032(mc/jabber/proto/c" +
      "ardinalDataBuffer.proto\032(mc/jabber/proto" +
      "/circuitBoardBuffer.proto\"\270\002\n\016CircuitMan" +
      "ager\022,\n\005board\030\001 \001(\0132\035.mc.jabber.proto.Ci" +
      "rcuitBoard\022?\n\010chipData\030\002 \003(\0132-.mc.jabber" +
      ".proto.CircuitManager.ChipDataEntry\0229\n\005s" +
      "tate\030\003 \003(\0132*.mc.jabber.proto.CircuitMana" +
      "ger.StateEntry\032/\n\rChipDataEntry\022\013\n\003key\030\001" +
      " \001(\005\022\r\n\005value\030\002 \001(\014:\0028\001\032K\n\nStateEntry\022\013\n" +
      "\003key\030\001 \001(\005\022,\n\005value\030\002 \001(\0132\035.mc.jabber.pr" +
      "oto.CardinalData:\0028\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          mc.jabber.proto.CardinalDataBuffer.getDescriptor(),
          mc.jabber.proto.CircuitBoardBuffer.getDescriptor(),
        });
    internal_static_mc_jabber_proto_CircuitManager_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_mc_jabber_proto_CircuitManager_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_mc_jabber_proto_CircuitManager_descriptor,
        new java.lang.String[] { "Board", "ChipData", "State", });
    internal_static_mc_jabber_proto_CircuitManager_ChipDataEntry_descriptor =
      internal_static_mc_jabber_proto_CircuitManager_descriptor.getNestedTypes().get(0);
    internal_static_mc_jabber_proto_CircuitManager_ChipDataEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_mc_jabber_proto_CircuitManager_ChipDataEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_mc_jabber_proto_CircuitManager_StateEntry_descriptor =
      internal_static_mc_jabber_proto_CircuitManager_descriptor.getNestedTypes().get(1);
    internal_static_mc_jabber_proto_CircuitManager_StateEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_mc_jabber_proto_CircuitManager_StateEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    mc.jabber.proto.CardinalDataBuffer.getDescriptor();
    mc.jabber.proto.CircuitBoardBuffer.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
